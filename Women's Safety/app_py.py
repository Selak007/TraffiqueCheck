# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dg3wYiRsH8PsxYKRkYc43QiRe_K9wWmo
"""

!pip install opencv-python tensorflow ipywidgets

import cv2
import numpy as np
from tensorflow.keras.models import load_model
from IPython.display import display, clear_output
import ipywidgets as widgets

# Load the trained model
model = load_model(r"/content/drive/MyDrive/model.h5")

# Function to preprocess and predict
def predict_frame(frame):
    frame_resized = cv2.resize(frame, (224, 224))  # Resize to match model input
    frame_normalized = frame_resized / 255.0  # Normalize
    frame_expanded = np.expand_dims(frame_normalized, axis=0)  # Add batch dimension
    prediction = model.predict(frame_expanded)
    return prediction[0][0]  # Binary classification output

# Upload video file
upload = widgets.FileUpload(accept=r"/content/drive/MyDrive/training_videos/06.avi", multiple=False)
display(upload)

# Button to process the video
process_button = widgets.Button(description="Process Video")
display(process_button)

# Output widgets
output = widgets.Output()
display(output)

# Function to handle button click
def on_button_click(b):
    with output:
        clear_output(wait=True)
        if upload.data:
            # Save the uploaded video to a temporary file
            with open("temp_video.avi", "wb") as f:
                f.write(upload.data[0])

            # Extract frames from the video
            cap = cv2.VideoCapture("temp_video.avi")
            frame_count = 0

            while True:
                ret, frame = cap.read()
                if not ret:
                    break

                # Display the frame
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                print(f"Frame {frame_count + 1}")
                display(widgets.Image(value=cv2.imencode('.jpg', frame_rgb)[1].tobytes()))

                # Predict using the model
                prediction = predict_frame(frame)
                print(f"Prediction: {'Class 1' if prediction > 0.5 else 'Class 0'} (Confidence: {prediction:.4f})")
                print("-" * 40)

                frame_count += 1

            cap.release()
            print("Video processing complete!")
        else:
            print("Please upload a video file first.")

# Attach the button click handler
process_button.on_click(on_button_click)

